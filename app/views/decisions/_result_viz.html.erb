<%
  width = 500
  height = 80
  @memberships = @decision.memberships.where(:user_id.exists => true).includes(:user)
%>

<style>
  circle.hover {
    stroke-width: 1px;
    stroke: #999;
  }
  .member-left {
    position: absolute;
    width: 15%;
    margin-top: 20px;
    left: 0;
    text-align: right;
  }
  .member-left .member {
    padding: 4px 4px 3px;
  }
  .member-left .member:hover {
    background-color: #CCC;
  }
  .alternatives-right {
    position: absolute;
    width: 15%;
    margin-top: 20px;
    right: 20px;
  }
  .alternatives-right .dot {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    margin-right: 5px;
  }
  .alternatives-right .dot.selected {
    width: 16px;
    height: 16px;
    border-radius: 10px;
    margin: -3px 2px -3px -3px;
  }
  .alternatives-right .alternative {
    padding: 4px 10px 3px 8px;
    cursor: pointer;
  }
  .alternatives-right .alternative .hover, .alternative:hover {
    background-color: #CCC;
  }
  polyline.label {
    visibility: hidden;
  }
  polyline.label.hover {
    visibility: visible;
  }
</style>

<div class="member-left">
  <h6>Members</h6>
  <% @memberships.each do |m| %>
  <div><span class="member" data-id="<%= m.user.email %>">
    <input type="checkbox" id="checkbox-<%= m.user.email %>">
    <label for="checkbox-<%= m.user.email %>" style="color: inherit; padding-left: 25px;">
      <%= m.user.name %>
      (<%= m.scores.select{|s| s.value >= 0}.count * 100 / (@decision.criteria.count * @decision.alternatives.count) %>%)
    </label>
  </span></div>
  <% end %>
</div>

<div class="alternatives-right">
  <h6>Alternatives</h6>
  <% @decision.alternatives.each do |a| %>
  <div>
    <span class="alternative a-<%= a.id %>" data-id="<%= a.id %>">
      <span class="dot" style="background-color: <%= a.color %>"></span> <%= a.name %>
    </span>
  </div>
  <% end %>
  <div class="legends" style="margin-top: 10px; font-size: 12px;">
    <div style="margin-bottom: 10px;">
      <svg width="20" height="20">
        <circle cx="10" cy="10" r="9.5" style="fill: rgb(211, 211, 211); stroke: rgb(0, 0, 0); stroke-width: 1px;"></circle>
      </svg> Committee
    </div>
    <div style="margin-bottom: 10px;">
      <svg width="20" height="20">
        <circle cx="10" cy="10" r="4" style="fill: rgb(211, 211, 211); stroke: rgb(0, 0, 0); stroke-width: 1px;"></circle>
      </svg> You
    </div>
    <div style="margin-bottom: 10px;">
      <svg width="70" height="25">
        <circle cx="10" cy="10" r="9.5" style="fill: rgb(211, 211, 211); stroke: rgb(0, 0, 0); stroke-width: 1px;"></circle>
        <circle cx="60" cy="10" r="4" style="fill: rgb(211, 211, 211); stroke: rgb(0, 0, 0); stroke-width: 1px;"></circle>
        <polyline fill="none" stroke="#F00" stroke-width="2" stroke-linejoin="round" points="10,10 10,24 60,24 60,10"></polyline>
      </svg><br>
      Conflict between committee &amp; someone
    </div>
    <div style="margin-bottom: 10px;">
      <svg width="60" height="30">
        <circle cx="30" cy="18" r="9.5" style="fill: rgb(211, 211, 211); stroke: rgb(0, 0, 0); stroke-width: 1px;"></circle>
        <polyline fill="none" stroke="#F00" stroke-width="2" stroke-linejoin="round" points="1,1 30,1 30,18 30,1 59,1"></polyline>
      </svg><br>
      Biggest point of disagreement within the commitee
    </div>
  </div>
</div>

<table id="rate-viz" style="margin-top: 20px;">
  <% ([nil] + @decision.criteria).each do |criterium| %>
    <tr>
      <td style="text-align: right;"><%= criterium&.name || 'Overall' %></td>
      <td style="padding: 0">
        <svg class="<%= criterium ? 'criterium' : 'overall' %>" width="<%= width + 150 %>" height="<%= height %>">
          <rect y="<%= height / 2 - (criterium ? 1 : 10) %>" x="20" fill="#CCC"
            width="<%= width %>" height="<%= criterium ? 2 : 20 %>" rx="<%= criterium ? 1 : 10 %>"></rect>
        </svg>
      </td>
    </tr>
  <% end %>
</table>

<script>
var criteria = <%= raw @decision.criteria.to_json %>
var alternatives = <%= raw @decision.alternatives.to_json %>
var scores = <%= raw @scores.to_json %>
var memberNames = <%= raw @memberships.map(&:user).map{|u| [u.email, u.name]}.to_h.to_json %>
var currentUser = <%= raw current_user.email.to_json %>

var selectedUid = null
var selectedAid = null

var xScale = d3.scaleLinear().domain([0, 10]).range([20, <%= width + 20 %>])
var xPos = function(x, i) {
  if (x >= 0 && x <= 10) {
    return xScale(x)
  } else {
    return <%= width %> + 35 + i * 15
  }
}

criteria.forEach(c => {
  alternatives.forEach(a => {
    if (!scores[c.id][a.id]) scores[c.id][a.id] = {}
  })
})

scores['avg'] = calcAvgs()
drawGroup()

$('.member').hover(function() {
  clearCanvas()
  drawIndividual($(this).data('id'))
}, function() {
  clearCanvas()
  drawGroup()
}).find('input').on('change', function() {
  var self = this
  $('.member input').each(function() {
    if (this != self) this.checked = false
  })
  selectedUid = this.checked ? $(this).parent().data('id') : null
})

$('.alternative').hover(function() {
  clearCanvas()
  drawAlternative($(this).data('id'))
}, function() {
  clearCanvas()
  drawGroup()
}).on('click', function() {
  $('.alternative .dot').each(function() {
    $(this).removeClass('selected')
  })
  if ($(this).data('id') === selectedAid) {
    selectedAid = null
  } else {
    selectedAid = $(this).data('id')
    $(this).find('.dot').addClass('selected')
  }
  clearCanvas()
  drawGroup()
})

function clearCanvas() {
  $('#rate-viz svg > :not(rect)').remove()
}

function drawSingle(aid, uid) {
  var cids = criteria.map(c => c.id)
  cids.unshift('avg')
  var color = alternatives.filter(a => a.id === aid)[0].color
  d3.select('#rate-viz')
    .selectAll('svg')
    .data(cids)
    .each(function(cid, i) {
      d3.select(this)
        .append('circle')
        .attr('cx', xPos(scores[cid][aid][uid], 0))
        .attr('cy', <%= height / 2 %>)
        .attr('r', () => i ? 5 : 10)
        .attr('fill', color)
    })
}

function drawAlternative(aid) {
  if (selectedUid) return drawSingle(aid, selectedUid)
  var cids = criteria.map(c => c.id)
  cids.unshift('avg')
  var color = alternatives.filter(a => a.id === aid)[0].color
  d3.select('#rate-viz')
    .selectAll('svg')
    .data(cids)
    .each(function(cid, i) {
      d3.select(this)
        .selectAll('circle')
        .data(Object.keys(scores[cid][aid]).filter(uid => scores[cid][aid][uid] > 0))
      .enter().append('circle')
        .attr('cx', uid => xPos(scores[cid][aid][uid]))
        .attr('cy', <%= height / 2 %>)
        .attr('r', () => i ? 5 : 10)
        .attr('fill', color)

      d3.select(this)
        .selectAll('text')
        .data(Object.keys(scores[cid][aid]).filter(uid => scores[cid][aid][uid] > 0))
      .enter().append('text')
        .text(uid => memberNames[uid])
        .attr('text-anchor', 'end')
        .attr('transform', uid => `translate(${xPos(scores[cid][aid][uid]) + 5}, <%= height / 2 + 15 %>) rotate(-30)`)
        .attr('font-size', '12px')
        .attr('fill', '#666')
    })
}

function drawIndividual(uid) {
  if (selectedAid) return drawSingle(selectedAid, uid)
  var cids = criteria.map(c => c.id)
  cids.unshift('avg')
  d3.select('#rate-viz')
    .selectAll('svg')
    .data(cids)
    .each(function(cid, i) {
      d3.select(this)
        .selectAll('circle')
        .data(alternatives)
      .enter().append('circle')
        .attr('cx', (a, i) => xPos(scores[cid][a.id][uid], i))
        .attr('cy', <%= height / 2 %>)
        .attr('r', () => i ? 5 : 10)
        .attr('fill', a => a.color)
    })
}

function drawGroup() {
  if (selectedAid) {
    return drawAlternative(selectedAid)
  }
  var cids = criteria.map(c => c.id)
  cids.unshift('avg')
  d3.select('#rate-viz')
    .selectAll('svg')
    .data(cids)
    .each(drawGroupCriterium)
}

function maxKey(hash, f) {
  if (!f) {
    f = k => hash[key]
  }
  var m = 0, max
  for (var key in hash) {
    if (f(key) > m) {
      m = f(key)
      max = key
    }
  }
  return max
}

function drawGroupCriterium(cid) {
  var g = d3.select(this)
  var avgs = {}, stds = {}
  var dots = []

  alternatives.forEach(a => {
    var ss = []
    for (k in scores[cid][a.id]) {
      if (scores[cid][a.id][k] >= 0) {
        ss.push(scores[cid][a.id][k])
      }
    }
    if (ss.length > 0) {
      avgs[a.id] = d3.mean(ss)
      stds[a.id] = d3.deviation(ss)
      dots.push({ id: a.id, type: 'average', r: 10, color: a.color, score: avgs[a.id] })
    }
  })

  alternatives.forEach((a, i) => {
    dots.push({ id: a.id, type: 'user', r: 5, index: i, color: a.color, score: scores[cid][a.id][selectedUid || maxKey(scores[cid][a.id])] })
  })

  g.selectAll('circle')
    .data(dots)
  .enter().append('circle')
    .attr('class', a => 'a-' + cid + '-' + a.id)
    .attr('id', a => a.type + cid + a.id)
    .attr('cx', (a, i) => xPos(a.score, a.index))
    .attr('cy', <%= height / 2 %>)
    .attr('r', a => a.r)
    .attr('fill', a => a.color)
    .on('mouseover', a => {
      d3.selectAll('.a-' + a.id + ', .a-' + cid + '-' + a.id).classed('hover', true)
      d3.selectAll('.a-' + cid + '-' + a.id).raise()
    })
    .on('mouseout', a => {
      d3.selectAll('.a-' + a.id + ', .a-' + cid + '-' + a.id).classed('hover', false)
    })
    .on('click', a => {
      $('.alternative.a-' + a.id).click()
    })

  if (selectedUid) {
    g.selectAll('polyline')
    .data(alternatives)
    .enter().append('polyline')
    .attr('class', a => 'label a-' + cid + '-' + a.id)
    .attr('fill', 'none')
    .attr('stroke', '#F00')
    .attr('stroke-width', 2)
    .attr('stroke-linejoin', 'round')
    .attr('pointer-events', 'none')
    .attr('points', a => {
      if (selectedUid) {
        var left = avgs[a.id] * <%= width / 10 %> + 20
        var right = scores[cid][a.id][selectedUid] * <%= width / 10 %> + 20
        if (left >= 0 && right >= 0) {
          return `${left},40 ${left},21 ${right},21 ${right},40`
        }
        return ''
      } else if (stds[a.id] > 0) {
        var mid = avgs[a.id] * <%= width / 10 %> + 20
        var left = (avgs[a.id] - stds[a.id]) * <%= width / 10 %> + 20
        var right = (avgs[a.id] + stds[a.id]) * <%= width / 10 %> + 20
        return `${left},21 ${mid},21 ${mid},40 ${mid},21 ${right},21`
      }
    })
  } else {
    var aid = maxKey(stds)
    g.append('polyline')
    .attr('fill', 'none')
    .attr('stroke', '#F00')
    .attr('stroke-width', 2)
    .attr('stroke-linejoin', 'round')
    .attr('pointer-events', 'none')
    .attr('points', a => {
      var mid = avgs[aid] * <%= width / 10 %> + 20
      var left = (avgs[aid] - stds[aid]) * <%= width / 10 %> + 20
      var right = (avgs[aid] + stds[aid]) * <%= width / 10 %> + 20
      return `${left},21 ${mid},21 ${mid},40 ${mid},21 ${right},21`
    })
    .lower()
    var aid = maxKey(scores[cid], a => Math.abs(scores[cid][a][maxKey(scores[cid][a], u => Math.abs(scores[cid][a][u] - avgs[a]))]) - avgs[a])
    var uid = maxKey(scores[cid][aid], u => Math.abs(scores[cid][aid][u] - avgs[aid]))
    g.append('polyline')
    .attr('class', 'a-' + cid + '-' + aid)
    .attr('fill', 'none')
    .attr('stroke', '#F00')
    .attr('stroke-width', 2)
    .attr('stroke-linejoin', 'round')
    .attr('pointer-events', 'none')
    .attr('points', a => {
      var left = avgs[aid] * <%= width / 10 %> + 20
      var right = scores[cid][aid][uid] * <%= width / 10 %> + 20
      if (left >= 0 && right >= 0) {
        return `${left},40 ${left},59 ${right},59 ${right},40`
      }
      return ''
    })
  }
}

function calcAvgs() {
  var avgs = {}
  alternatives.forEach(a => {
    var count = {}
    avgs[a.id] = {}
    criteria.forEach(c => {
      if (!scores[c.id][a.id]) return
      for (k in scores[c.id][a.id]) {
        if (scores[c.id][a.id][k] >= 0) {
          if (!avgs[a.id][k]) {
            avgs[a.id][k] = 0
            count[k] = 0
          }
          count[k]++
          avgs[a.id][k] += scores[c.id][a.id][k]
        }
      }
    })
    for (k in avgs[a.id]) {
      avgs[a.id][k] /= count[k]
    }
  })
  return avgs
}

</script>
