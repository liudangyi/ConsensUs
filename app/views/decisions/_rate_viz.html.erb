<%
  width = 500
  height = 40
%>

<style>
  use {
    stroke-width: 1px;
    stroke: #999;
  }
  .alternatives-right {
    position: absolute;
    width: 15%;
    margin-top: 20px;
    right: 0;
  }
  .alternatives-right .label {
    padding: 2px 4px;
  }
  .alternatives-right .dot {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 5px;
    margin-right: 5px;
  }
  .alternatives-right .hover {
    background-color: #CCC;
  }
</style>

<div class="alternatives-right">
  <h6>Alternatives</h6>
  <% @decision.alternatives.each do |a| %>
  <div>
    <span class="label label<%= a.id %>">
      <span class="dot" style="background-color: <%= a.color %>"></span> <%= a.name %>
    </span>
  </div>
  <% end %>
</div>

<table id="rate-viz" style="margin-top: 20px;">
  <% ([nil] + @decision.criteria).each do |criterium| %>
    <tr>
      <td style="text-align: right;"><%= criterium&.name || 'Overall' %></td>
      <td>
        <svg class="<%= criterium ? 'criterium' : 'overall' %>" width="<%= width + 130 %>" height="<%= height %>">
          <rect y="<%= height / 2 - (criterium ? 1 : 10) %>" x="10" fill="#CCC"
            width="<%= width %>" height="<%= criterium ? 2 : 20 %>" rx="<%= criterium ? 1 : 10 %>"></rect>
        </svg>
      </td>
    </tr>
  <% end %>
</table>

<script>
var criteria = <%= raw @decision.criteria.to_json %>
var alternatives = <%= raw @decision.alternatives.to_json %>
var scores = <%= raw @scores.to_json %>

var xScale = d3.scaleLinear().domain([0, 10]).range([10, <%= width + 10 %>])
var xPos = function(x, i) {
  if (x >= 0 && x <= 10) {
    return xScale(x)
  } else {
    return <%= width %> + 35 + i * 25
  }
}

var drag = d3.drag().on('start', dragStart).on('drag', dragMove).on('end', dragEnd)

calcAvgs()
drawIndividual()

function drawIndividual() {
  var cids = criteria.map(c => c.id)
  cids.unshift('avg')
  d3.select('#rate-viz')
    .selectAll('svg')
    .data(cids)
    .each(function(cid, i) {
      d3.select(this)
        .selectAll('circle')
        .data(alternatives.map((a, i) => ({ id: a.id, color: a.color, cid: cid, index: i })))
      .enter().append('circle')
        .attr('cx', a => xPos(scores[a.cid][a.id], a.index))
        .attr('cy', <%= height / 2 %>)
        .attr('r', 10)
        .attr('fill', a => a.color)
        .call(drag)
    })
}

function updateAvg() {
  d3.select('svg.overall')
    .selectAll('circle')
    .attr('cx', (a, i) => xPos(scores[a.cid][a.id], i))
}

function dragStart() {
  d3.select(this).raise()
}

function dragMove(a) {
  d3.select(this).attr('cx', d3.event.x)
  var score = xScale.invert(d3.event.x)
  if (score < 0 || score > 10) {
    score = -1
  }
  scores[a.cid][a.id] = score
  calcAvgs()
  updateAvg()
}

function dragEnd(a) {
  setScore(a.cid, a.id, scores[a.cid][a.id])
  d3.select(this).attr('cx', a => xPos(scores[a.cid][a.id], a.index))
}

function calcAvgs() {
  var avgs = {}
  alternatives.forEach(a => {
    var count = 0
    avgs[a.id] = 0
    criteria.forEach(c => {
      if (scores[c.id][a.id] >= 0) {
        avgs[a.id] += scores[c.id][a.id]
        count += 1
      }
    })
    avgs[a.id] /= count
  })
  scores['avg'] = avgs
}

</script>
